Both Linear Search and Insertion Sort ran as expected. Linear Search with an O(n)= n no matter how large or shuffled the array was. Insertion sort on the other hand had a more and more swaps when the array got bigger in length or when the array was less in order. Insertion sort has a best run time O(n) when the array is perfectly sorted already, which can be seen with the example where the array is 100% sorted and there are zero swaps. It's worst run time is O(n^2). Below are some examples.



Linear Search Examples:
analyzeMe LS=10 20 0
A = 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
Entries Searched : 11

analyzeMe LS=10 20 100
A = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
Entries Searched : 10


analyzeMe LS=10 20 50
A = 35 30 26 4 22 6 7 8 9 10 11 40 13 14 15 31 40 32 19 20 
Entries Searched : 10

analyzeMe LS=10 20 50
A = 1 2 25 4 26 6 36 40 35 35 11 12 13 14 24 37 17 18 19 20 
Entries Searched : not found


Insertion Sort Examples:
analyzeMe IS 20 100
A initial = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
A final = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
Num Swaps : 0

analyzeMe IS 20 50
A initial = 37 21 3 4 28 6 7 8 9 10 38 12 13 14 25 29 17 31 39 20 
A final = 3 4 6 7 8 9 10 12 13 14 17 20 21 25 28 29 31 37 38 39 
Num Swaps : 54

IS 200 50
Num Swaps : 6548

IS 1000 50
Num Swaps : 157169






